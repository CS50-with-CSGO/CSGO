(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{156:function(t,n,e){"use strict";e.r(n),e.d(n,"frontMatter",(function(){return p})),e.d(n,"metadata",(function(){return o})),e.d(n,"rightToc",(function(){return i})),e.d(n,"default",(function(){return k}));var a=e(2),c=e(9),r=(e(0),e(221)),p={id:"6\uc8fc\ucc28\ubbf8\uc158",title:"6\uc8fc\ucc28 \ubbf8\uc158"},o={id:"6/6\uc8fc\ucc28\ubbf8\uc158",isDocsHomePage:!1,title:"6\uc8fc\ucc28 \ubbf8\uc158",description:"\u2714\ufe0e \ubbf8\uc158 3.",source:"@site/docs/6/6\uc8fc\ucc28\ubbf8\uc158.md",permalink:"/csgo/docs/6/6\uc8fc\ucc28\ubbf8\uc158",editUrl:"https://github.com/CS50-with-CSGO/csgo/edit/master/docs/6/6\uc8fc\ucc28\ubbf8\uc158.md",sidebar:"someSidebar",previous:{title:"9) \uc2a4\ud0dd, \ud050, \ub515\uc154\ub108\ub9ac",permalink:"/csgo/docs/6/\uc2a4\ud0dd\ud050"},next:{title:"4\ubc88 \ubb38\uc81c",permalink:"/csgo/docs/7/4\ubc88\ubb38\uc81c"}},i=[{value:"\u2714\ufe0e \ubbf8\uc158 3.",id:"\ufe0e-\ubbf8\uc158-3",children:[{value:"1. \ubbf8\uc158 \uc81c\ubaa9",id:"1-\ubbf8\uc158-\uc81c\ubaa9",children:[]},{value:"2. \uc9c0\uc2dc\ubb38",id:"2-\uc9c0\uc2dc\ubb38",children:[]},{value:"3. \ud575\uc2ec \uac1c\ub150",id:"3-\ud575\uc2ec-\uac1c\ub150",children:[]}]},{value:"\ud83d\ude0e \uc81c\ucd9c \ub2f5\uc548",id:"-\uc81c\ucd9c-\ub2f5\uc548",children:[]}],s={rightToc:i};function k(t){var n=t.components,e=Object(c.a)(t,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,e,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"\ufe0e-\ubbf8\uc158-3"},"\u2714\ufe0e \ubbf8\uc158 3."),Object(r.b)("h3",{id:"1-\ubbf8\uc158-\uc81c\ubaa9"},"1. \ubbf8\uc158 \uc81c\ubaa9"),Object(r.b)("p",null,"\ubc30\uc5f4\ub85c Stack \ub9cc\ub4e4\uae30"),Object(r.b)("h3",{id:"2-\uc9c0\uc2dc\ubb38"},"2. \uc9c0\uc2dc\ubb38"),Object(r.b)("p",null,"EDWITH CS50 \uac15\uc88c\uc5d0\uc11c \ubc30\uc6b4 Stack\uc744 C \uc5b8\uc5b4\ub85c \uad6c\ud604\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Stack\uc744 \uad6c\ud604\ud558\ub294 \ubc29\ubc95\uc740 \uc815\ub9d0 \ub9ce\uc740\ub370\uc694, \uc774\ubc88 \ubb38\uc81c\uc5d0\uc11c\ub294 Stack\uc744 \ubc30\uc5f4\uc744 \uc774\uc6a9\ud574\uc11c \uad6c\ud604\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574\uc11c \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc544\ub798 \ud45c\uc5d0 \ud568\uc218\uc758 \uc8fc\uc11d \ucc98\ub9ac\ub41c \ubd80\ubd84\ub4e4\uc5d0 \uc5ec\ub7ec\ubd84\uc758 \ucf54\ub4dc\ub97c \ucc44\uc6cc \ub123\uc5b4\uc8fc\uc138\uc694."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c"}),'#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct stack{\n    int top;\n    int capacity;\n    int* array;\n} Stack;\n\nStack* createStack(int capacity) {\n    Stack* stack = (Stack*)malloc(sizeof(Stack));\n    stack->capacity = capacity;\n    stack->top = -1;\n    stack->array = (int *)malloc(stack->capacity*sizeof(int));\n    return stack;\n}\n\nint isFull(Stack* stack) {\n    return stack->top == stack->capacity-1;\n}\n\nint isEmpty(Stack* stack) {\n    return stack->top == -1;\n}\n\nvoid push(Stack* stack, int item) {\n    if (isFull(stack))\n        return;\n    stack->array[++stack->top] = item;\n    printf("%d pushed to stack\\n", item);\n}\n\nint pop(Stack* stack) {\n    // \uc774\uacf3\uc744 \ucc44\uc6cc\uc8fc\uc138\uc694!\n}\n\nint peek(Stack* stack) {\n    // \uc774\uacf3\uc744 \ucc44\uc6cc\uc8fc\uc138\uc694!\n}\n\nint main() {\n    Stack* stack = createStack(100);\n\n    push(stack, 10);\n    push(stack, 20);\n    push(stack, 30);\n    push(stack, 40);\n\n    printf("%d pop from stack\\n", pop(stack));\n    printf("%d pop from stack\\n", pop(stack));\n\n    push(stack, 50);\n    printf("%d pop from stack\\n", pop(stack));\n    printf("%d pop from stack\\n", pop(stack));\n    printf("%d pop from stack\\n", pop(stack));\n    printf("%d pop from stack\\n", pop(stack));\n    return 0;\n}\n')),Object(r.b)("p",null,"Main \ud568\uc218\ub97c \uc2e4\ud589\uc2dc\ud0a4\uba74 Stack \ucd9c\ub825 \uacb0\uacfc\uac00 \uc815\uc0c1\uc801\uc73c\ub85c \ub098\uc640\uc57c \ud569\ub2c8\ub2e4.\n\uc704\uc758 \ubb38\uc81c\ub77c\uba74\n10 pushed to stack\n20 pushed to stack\n30 pushed to stack\n40 pushed to stack\n40 pop from stack\n30 pop from stack\n50 pushed to stack\n50 pop from stack\n20 pop from stack\n10 pop from stack\n-9999 pop from stack"),Object(r.b)("p",null,"\uc704\uc640 \uac19\uc740 \uacb0\uacfc\uac00 \ub098\uc624\ub3c4\ub85d \uc791\uc131\ud574 \uc8fc\uc138\uc694. \ub2e4\uc591\ud55c \uc22b\uc790\uc640 \uc0ac\ub840\ub97c \ub9cc\ub4e4\uc5b4\uc11c \uc2e4\ud5d8\ud574 \ubcf4\uc138\uc694!"),Object(r.b)("h3",{id:"3-\ud575\uc2ec-\uac1c\ub150"},"3. \ud575\uc2ec \uac1c\ub150"),Object(r.b)("p",null,"#Stack #\ubc30\uc5f4 #Stack \uad6c\ud604"),Object(r.b)("hr",null),Object(r.b)("h2",{id:"-\uc81c\ucd9c-\ub2f5\uc548"},"\ud83d\ude0e \uc81c\ucd9c \ub2f5\uc548"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c"}),'#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct stack{\n    int top;\n    int capacity;\n    int* array;\n} Stack;\n\nStack* createStack(int capacity) {\n    \n    Stack* stack = (Stack*)malloc(sizeof(Stack));\n    stack->capacity = capacity;\n    stack->top = -1;\n    stack->array = (int *)malloc(stack->capacity*sizeof(int));\n    \n    return stack;\n    \n}\n\nint isFull(Stack* stack) {\n    \n    return stack->top == stack->capacity-1;\n    \n}\n\nint isEmpty(Stack* stack) {\n    \n    return stack->top == -1;\n    \n}\n\nvoid push(Stack* stack, int item) {\n    \n    if (isFull(stack)) \n        return;\n    \n    stack->array[++stack->top] = item;\n    printf("%d pushed to stack\\n", item);\n}\n\nint pop(Stack* stack) {\n    // \uc774\uacf3\uc744 \ucc44\uc6cc\uc8fc\uc138\uc694\n    if (isEmpty(stack)) return -9999;\n        \n    return stack->array[stack->top--];\n}\n\nint peek(Stack* stack) {\n    // \uc774\uacf3\uc744 \ucc44\uc6cc\uc8fc\uc138\uc694\n    if (isEmpty(stack)) return -9999;\n    \n    int item = stack->array[stack->top];\n    \n    printf("peek to stack %d\\n", item);\n}\n\nint main() {\n    Stack* stack = createStack(100);\n\n    push(stack, 10);\n    push(stack, 20);\n    push(stack, 30);\n    push(stack, 40);\n\n    printf("%d pop from stack\\n", pop(stack));\n    printf("%d pop from stack\\n", pop(stack));\n\n    push(stack, 50);\n    printf("%d pop from stack\\n", pop(stack));\n    printf("%d pop from stack\\n", pop(stack));\n    printf("%d pop from stack\\n", pop(stack));\n    printf("%d pop from stack\\n", pop(stack));\n    \n    return 0;\n    \n    free(stack);\n}\n\n')))}k.isMDXComponent=!0},221:function(t,n,e){"use strict";e.d(n,"a",(function(){return u})),e.d(n,"b",(function(){return d}));var a=e(0),c=e.n(a);function r(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function p(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,a)}return e}function o(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?p(Object(e),!0).forEach((function(n){r(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):p(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function i(t,n){if(null==t)return{};var e,a,c=function(t,n){if(null==t)return{};var e,a,c={},r=Object.keys(t);for(a=0;a<r.length;a++)e=r[a],n.indexOf(e)>=0||(c[e]=t[e]);return c}(t,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)e=r[a],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(c[e]=t[e])}return c}var s=c.a.createContext({}),k=function(t){var n=c.a.useContext(s),e=n;return t&&(e="function"==typeof t?t(n):o(o({},n),t)),e},u=function(t){var n=k(t.components);return c.a.createElement(s.Provider,{value:n},t.children)},l={inlineCode:"code",wrapper:function(t){var n=t.children;return c.a.createElement(c.a.Fragment,{},n)}},f=c.a.forwardRef((function(t,n){var e=t.components,a=t.mdxType,r=t.originalType,p=t.parentName,s=i(t,["components","mdxType","originalType","parentName"]),u=k(e),f=a,d=u["".concat(p,".").concat(f)]||u[f]||l[f]||r;return e?c.a.createElement(d,o(o({ref:n},s),{},{components:e})):c.a.createElement(d,o({ref:n},s))}));function d(t,n){var e=arguments,a=n&&n.mdxType;if("string"==typeof t||a){var r=e.length,p=new Array(r);p[0]=f;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=t,o.mdxType="string"==typeof t?t:a,p[1]=o;for(var s=2;s<r;s++)p[s]=e[s];return c.a.createElement.apply(null,p)}return c.a.createElement.apply(null,e)}f.displayName="MDXCreateElement"}}]);